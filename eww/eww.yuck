(defvar profile-face "/home/artem/.face")
(defvar scripts "~/.local/bin")
(defvar dm-scripts "~/.local/bin/dm-scripts")

;; shows screen instead of monitor - always 0
(defpoll focused-screen :interval "1s"
  "eval $(xdotool getactivewindow getwindowgeometry --shell) && echo $SCREEN"
  )

(defwindow main-bar
  :monitor 0
  :stacking "fg"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "30px"
                      :anchor "top center")

  ;; wayland
  :exclusive true

  ;; x11
  :windowtype "dock"
  :reserve (struts :side "top"
                   :distance "30px")

  (centerbox :orientation "h"
             :class "bar"

(box :class "leftside"
     :orientation "h"
     :space-evenly false
     :halign "start"

     (logo)
     (separator)
     (time)
     (separator)
     (workspaces)
     (separator)
     wm-layout-2
     (separator))

(box :class "center"
     :orientation "h"
     :space-evenly false
     :halign "center"

     (window-title)
     (separator)
     (music))

(box :class "rightside"
     :orientation "h"
     :space-evenly false
     :halign "end"

     (kbd)
     (sys-tray)

     (separator)
     (battery)
     (updates)
     (network)
     (ram)
     (cpu)
     (cpu-thermal)
     (volume)
     ;; (disk_usage :icon "根hdd"
     ;;             :disk "/")
     ;; (disk_usage :icon "家hdd"
     ;;             :disk "/home/artem")
     (separator)

     (date)
     (profile))))

(defwindow second-bar
  :monitor 1
  :stacking "fg"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "30px"
                      :anchor "top center")

  ;; wayland
  :exclusive true

  ;; x11
  :windowtype "dock"
  :reserve (struts :side "top"
                   :distance "30px")

  (centerbox :orientation "h"
             :class "bar"

(box :class "leftside"
     :orientation "h"
     :space-evenly false
     :halign "start"
     (logo)
     (time)
     (separator)
     (workspaces)
     (separator))

(music)

(box :class "rightside"
     :orientation "h"
     :space-evenly false
     :halign "end"

     (kbd)

     (separator)
     (battery)
     (volume)
     (separator)

     (date)
     (uptime))))

(defvar debug "")

(defwidget debug []
  (box :class "widget debug"
       :orientation "h"
       :halign "center"
       debug
       ))

(defwidget separator []
  (box :class "separator"
       :orientation "h"
       :halign "center"
       "|"))

(defwidget logo []
  (image :path "/home/artem/.local/share/icons/Papirus-Dark/64x64/apps/distributor-logo-archlinux.svg"
         :image-height "24"
         :class "widget logo"))

(defwidget time []
  (box :class "widget time"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {time}))

(defpoll time
  :interval "1s"
  :initial "0:00 AM"
   "date '+%l:%M %p'")

(defwidget workspaces []
           (box :class "bar-widget bar-widget-workspaces"
                :space-evenly false
                :spacing 2

                (for workspace in listen_workspaces
                     (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
                               (box :class "workspace-entry ${workspace.windows > 0 ? "occupied" : "empty"} ${workspace.monitor == 0 ? "monitor_0": ""} ${workspace.monitor == 1 ? "monitor_1": ""}"
                                    (label :text { workspace.name == 1 ? "globe"        :
                                                   workspace.name == 2 ? "gamepad"      :
                                                   workspace.name == 3 ? "keyboard"     :
                                                   workspace.name == 4 ? "folder"       :
                                                   workspace.name == 5 ? "headphones"   :
                                                   workspace.name == 6 ? "camera"       :
                                                   workspace.name == 7 ? "comment"      :
                                                   workspace.name == 8 ? "server"       :
                                                   workspace.name == 9 ? "chart-simple" :
                                                                          workspace.name }))))))

(defpoll listen_workspaces
         :interval "2s"
         :initial "[]"
         "bash ~/.config/hypr/scripts/get-workspaces.sh")

(deflisten wm-layout
  "~/.local/bin/listen-wm-layout.sh")

(defpoll wm-layout-2 :interval "1s"
  :iniitial ""
  "~/.local/bin/get-wm-layout.sh")

(defwidget window-title []
  (label :limit-width 40
         :text window-title))

(deflisten window-title
  "bash ~/.config/hypr/scripts/listen-window-title.sh")

(defwidget music []
  (box :class "widget music"
       :orientation "h"
       :space-evenly false
       :halign "center"
       (icon :icon { music-song  == ""        ? "stop"  :
                     music-state == "playing" ? "music" :
                                                "pause" })
       (label :class "music-song"
              :limit-width 50
              :text music-song)
       (label :class "music-flags"
              :text music-flags)
       (label :class "music-flags"
              :text music-volume)
       ))

(defpoll music-song  :interval "1s"
  "~/.local/bin/get-music.sh song")

(defpoll music-state :interval "1s"
  :iniitial "paused"
  "~/.local/bin/get-music.sh state")

(defpoll music-flags :interval "1s"
  :iniitial "[----]"
  "~/.local/bin/get-music.sh flags")

(defpoll music-volume :interval "1s"
  :iniitial "[----]"
  "~/.local/bin/get-music.sh volume")

(defwidget sys-tray []
  (box :orientation "h"
       :visible { trayer-width != 0 ? true : false }
       :space-evenly false
       (separator)
       (box :orientation "h"
            :width trayer-width)))

(defpoll trayer-width
  :interval "2s"
  :initial "0"
  :run-while true
  "~/.local/bin/get-trayer-width.sh")

(defpoll kbd :interval "1s"
             :initial "us"
             "~/.local/bin/get-lang.sh")

(defwidget kbd []
  (box :orientation "h"
       :space-evenly false
       :class "widget language"
       (flag :lang kbd)))

(defwidget flag [?lang]
  (image :image-height "18"
         :path "/usr/share/iso-flag-png/${lang}.png"))

(defwidget battery []
  (revealer :transition "slideright"
            :reveal {present == "yes" ? true : false}
            :duration 2
            (box :class "widget colored 7 volume"
                (slider :icon "gamepad"
                    :value charge
                    :onchange ""
                    ))))

(defpoll charge :interval "10s"
  :iniitial 50
  "~/.local/bin/get-battery.sh percentage battery_ps_controller_battery_a0oabo51o62o65o1d")

(defpoll present :interval "10s"
  :iniitial 50
  "~/.local/bin/get-battery.sh present battery_ps_controller_battery_a0oabo51o62o65o1d")

(defpoll state :interval "10s"
  :iniitial 50
  "~/.local/bin/get-battery.sh state battery_ps_controller_battery_a0oabo51o62o65o1d")

(defpoll warning-level :interval "10s"
  :iniitial 50
  "~/.local/bin/get-battery.sh warning-level battery_ps_controller_battery_a0oabo51o62o65o1d")

(defwidget updates []
  (box :class { updates ==   0  ? "widget colored 6 status-widget state-good"  :
                updates ==  69  ? "widget colored 6 status-widget red"         :
                updates == 101  ? "widget colored 6 status-widget orange"      :
                updates == 220  ? "widget colored 6 status-widget yellow"      :
                updates == 404  ? "widget colored 6 status-widget yellow"      :
                updates == 420  ? "widget colored 6 status-widget green"       :
                updates == 1001 ? "widget colored 6 status-widget purple"      :
                updates == year ? "widget colored 6 status-widget special"     :
                                  "widget colored 6 status-widget"             }

       :orientation "h"
       :space-evenly false
       (icon :icon { updates ==   0  ? "check"    :
                     updates ==  69  ? "heart"    :
                     updates == 101  ? "book"     :
                     updates == 220  ? "bolt"     :
                     updates == 404  ? "warning"  :
                     updates == 420  ? "cannabis" :
                     updates == 1001 ? "moon"     :
                     updates == year ? "calendar" :
                                       "bell" })

       (revealer :class { updates ==  69  ? ""  :
                          updates == 101  ? ""  :
                          updates == 220  ? ""  :
                          updates == 404  ? ""  :
                          updates == 420  ? ""  :
                          updates == 1001 ? ""  :
                          updates == year ? ""  :
                          updates >= 900  ? "state-urgent"  :
                          updates >= 400  ? "state-warning" :
                                            "" }
                 :transition "slideright"
                 :reveal {updates > 0}
                 :duration 2
                 updates)

       (revealer :class "yellow update-flags"
                 :transition "slideright"
                 :reveal {update-flags != ""}
                 :duration 2
                 update-flags)))

(defpoll year :interval "24h"
                 "date +%Y")

(defpoll updates :interval "5s"
                 :initial 0
                 "~/.local/bin/get-updates.sh")

(defpoll update-flags :interval "5s"
                 :initial ""
                 "~/.local/bin/get-update-flags.sh")

(defwidget network []
    (box :class "widget colored 5 network"
        (icon :icon "ethernet")
        (graph :min 0
               :class "graph net-down"
               :time-rage "1h"
               :dynamic false
               :thickness 2
               :line-style "round"
               :value {EWW_NET[interface].NET_DOWN})
        (icon :icon "⇵")
        (graph :min 0
               :class "graph net-up"
               :time-rage "1h"
               :dynamic false
               :thickness 2
               :value {EWW_NET[interface].NET_UP})))

(defpoll interface
         :interval "1m"
         "~/.local/bin/get-network-interface.sh")

(defwidget ram []
    (box :class "widget colored 4 volume"
    (slider :icon "memory"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")))

(defwidget cpu []
    (box :class "widget colored 3 volume"
        (slider :icon "microchip"
                :value {EWW_CPU.avg}
                :onchange "")))

(defwidget cpu-thermal []
    (box :class "widget colored 2 volume"
        (icon :icon "")
                {EWW_TEMPS.CORETEMP_CORE_0}
                "°C"
                ))

(defwidget volume []
    (box :class "widget colored 1 volume"
        (slider :icon { mute   == "on" ? "volume-xmark" :
                        volume ==  0   ? "volume-off"   :
                        volume <= 40   ? "volume-low"   :
                                        "volume-high"  }
                :value volume
                :onchange "amixer -D pulse sset Master {}%"
                )))

(defpoll volume :interval "1s"
                :iniitial 50
                "~/.local/bin/get-volume.sh")

(defpoll mute :interval "1s"
              :iniitial "off"
              "~/.local/bin/get-mute.sh")

(defwidget disk_usage [?icon disk]
    (slider :icon icon
            :value {round((1 - (EWW_DISK[disk].free / EWW_DISK[disk].total)) * 100, 0)}
            :onchange ""))

(defwidget uptime []
  (box :orientation "h"
       :space-evenly false
       (icon :icon "circle-arrow-up")
       uptime))

(defpoll uptime :interval "1m"
                :initial "0d 0h"
                "~/.local/bin/get-uptime.sh")

(defwidget date []
  (eventbox :onclick      "eww open --toggle --screen $(xprop -root _NET_CURRENT_DESKTOP | awk '{print $3}') calendar-window"
            :cursor "pointer"
            (box :class "widget date"
                 :orientation "h"
                 :space-evenly false
                 :halign "center"
                 (icon :icon { matches(date, "20 Apr") ? "cannabis" :
                               matches(date, "25 Dec") ? "candy-cane" :
                               matches(date, "31 Dec") ? "champagne-glasses" :
                                                         "calendar" })
                 {date})))

(defpoll date
  :interval "1h"
  :initial "1 Jan 1970"
  "date '+%a, %d-%b-%Y'")

(defvar show-power-menu false)
(defwidget profile []
  (eventbox :onhover     "eww update show-power-menu=true"
            :onhoverlost "eww update show-power-menu=false"
            :cursor "pointer"
            :timeout 5
            (box :orientation "h"
                 :space-evenly false
                 :class "widget profile"
                 (revealer :transition "slideleft"
                           :reveal show-power-menu
                           :duration 2
                           (power-menu))
                 (image :path profile-face
                        :class "profile-face"
                        :image-height 24))))

(defwidget power-menu []
  (box :orientation "h"
       :space-evenly true
       :class "status-widget power-menu"
       (button :onclick "eww update confirmation-message='Shutdown System?' yes-command='${dm-scripts}/dm-power poweroff' && eww open confirmation-window"
               :tooltip "Shutdown"
               :class "shutdown"
               "power-off")
       (button :onclick "eww update confirmation-message='Restart System?' yes-command='${dm-scripts}/dm-power reboot' && eww open confirmation-window"
               :tooltip "Reboot"
               :class "reboot"
               "rotate")
       (button :onclick "eww update confirmation-message='Suspend System?' yes-command='${dm-scripts}/dm-power suspend' && eww open confirmation-window"
               :tooltip "Suspend"
               :class "suspend"
               "moon")
       (button :onclick "${dm-scripts}/dm-power lock"
               :tooltip "Lock Screen"
               :class "lock-screen"
               "lock")
       (button :onclick "eww update confirmation-message='Log Out?' yes-command='eww reload' && eww open confirmation-window"
               :tooltip "Logout"
               :class "log-out"
               "right-from-bracket")))

(defwidget icon [?icon]
  (box :class "icon" icon))

(defwidget slider [icon value onchange]
  (box :orientation "h"
       :class "slider status-widget"
       :space-evenly false
    (icon :icon icon)
    (scale :min 0
           :max 100
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget circular [icon value]
  (box :orientation "h"
       :class "progress status-widget"
       :space-evenly false
       (icon :icon icon)
       (circular-progress :value value
                          :start-at 0
                          :thickness 7
                          :clockwise true
                          )))

(defwindow confirmation-window
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "300px"
                      :height "100px"
                      :anchor "center")
  :windowtype "dialog"
  :stacking "fg"
  :wm-ignore true
  (confirmation-dialog)
  )

(defvar confirmation-message "")
(defvar yes-command "")
(defvar dismiss-command "eww close confirmation-window")

(defwidget confirmation-dialog []
  (box :orientation "v"
       confirmation-message
       (box :orientation "h"
            (button :onclick "${yes-command} & ${dismiss-command}"
                    "Yes")
            (button :onclick dismiss-command
                    "No")
       )))

(defwindow calendar-window
  :monitor 0
  :geometry (geometry :x "-10px"
                      :y "34px"
                      :anchor "top right")
  :windowtype "dialog"
  :stacking "fg"
  :wm-ignore true
  (calendar :show-details true
            :show-heading true
            :show-day-names true
            :show-week-numbers false)
  )
