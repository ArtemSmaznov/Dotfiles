#+TITLE: Dotfiles
#+AUTHOR: Artem Smaznov
#+DESCRIPTION: A collection of personal dotfiles
#+STARTUP: overview

This is a set of my dotfiles for smaller configs.

Larger configurations such as Window Managers, VIM, etc are hosted on their own separate repositories:
- [[https://github.com/ArtemSmaznov/Doom-emacs/blob/master/config.org][Doom-emacs]]
- [[https://github.com/ArtemSmaznov/Vim][Vim]]
- [[https://github.com/ArtemSmaznov/qTile][qTile]]
- [[https://github.com/ArtemSmaznov/AwesomeWM][AwesomeWM]]
- [[https://github.com/ArtemSmaznov/Wallpapers][Wallpapers]]
- [[https://github.com/ArtemSmaznov/dmscripts][DMScripts]]

* Table of Content :toc:
- [[#window-manager][Window Manager]]
  - [[#qtile][qTile]]
  - [[#awesomewm][AwesomeWM]]
  - [[#compositor][Compositor]]
- [[#shell][Shell]]
  - [[#bash][Bash]]
  - [[#zsh][ZSH]]
  - [[#fish][Fish]]
  - [[#aliases][Aliases]]
  - [[#starship-prompt][Starship Prompt]]
- [[#terminal][Terminal]]
  - [[#alacritty][Alacritty]]
  - [[#terminator][Terminator]]
- [[#text-editor][Text Editor]]
  - [[#doom-emacs][Doom-emacs]]
  - [[#vim][Vim]]
  - [[#nano][Nano]]
- [[#web-browser][Web Browser]]
  - [[#qutebrowser][QuteBrowser]]
  - [[#nyxt][Nyxt]]
  - [[#idea-vimb][IDEA Vimb]]
- [[#tools][Tools]]
  - [[#tmux][=tmux=]]
  - [[#cava][=cava=]]
  - [[#dunst][=dunst=]]
  - [[#gh][=gh=]]
  - [[#neofetch][=neofetch=]]
  - [[#htop][=htop=]]
  - [[#bashtop][=bashtop=]]
  - [[#redshift][=redshift=]]
  - [[#rofi][=rofi=]]
  - [[#vifm][=vifm=]]

* Window Manager
** [[https://github.com/ArtemSmaznov/qTile][qTile]]
** [[https://github.com/ArtemSmaznov/AwesomeWM][AwesomeWM]]
** Compositor
Dependencies:

| Package   | Description                                                                             |
|-----------+-----------------------------------------------------------------------------------------|
| [[https://aur.archlinux.org/packages/picom-git/][picom-git]] | I am using =picom-git= from the AUR for the nice =dual_kawase= blur for transparent windows |

*** Shadows
Enabled client-side shadows on windows. Note desktop windows (windows with =_NET_WM_WINDOW_TYPE_DESKTOP=) never get shadow, unless explicitly requested using the =wintypes= option.

#+begin_src conf :tangle ~/.config/picom/picom.conf
shadow = true;

shadow-radius = 12;
shadow-offset-x = -12;
shadow-offset-y = -12;
shadow-opacity = 0.7;
shadow-color = "#000000"

# Specify a list of conditions of windows that should have no shadow.
shadow-exclude = [
	"name = 'Notification'",
	"class_g = 'Conky'",
	"class_g ?= 'Notify-osd'",
	"class_g = 'Cairo-clock'",
	"class_g = 'slop'",
	"_GTK_FRAME_EXTENTS@:c",
	"_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"
];

# Specify a list of conditions of windows that should have no shadow painted over, such as a dock window.
# clip-shadow-above = []

# Specify a X geometry that describes the region in which shadow should not
# be painted in, such as a dock window region. Use
#    shadow-exclude-reg = "x10+0+0"
# for example, if the 10 pixels on the bottom of the screen should not have shadows painted on.
#
# shadow-exclude-reg = "x10+0+0";

# Crop shadow of a window fully on a particular Xinerama screen to the screen.
# xinerama-shadow-crop = true

#+end_src

*** Fading
Fade windows in/out when opening/closing and when opacity changes, unless =no-fading-openclose= is used.

#+begin_src conf :tangle ~/.config/picom/picom.conf
fading = true;

# Opacity change between steps while fading.
fade-in-step = 0.03;
fade-out-step = 0.03;

# The time between steps in fade step, in milliseconds.
fade-delta = 5;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [];

# Do not fade on window open/close.
# no-fading-openclose = true;

# Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
no-fading-destroyed-argb = true;

#+end_src

*** Transparency

#+begin_src conf :tangle ~/.config/picom/picom.conf
# Default opacity for active and inactive windows as well as window title bars and borders
# active-opacity = 1;
# inactive-opacity = 0.8;
# frame-opacity = 1;

# Let inactive opacity set by -i override the '_NET_WM_OPACITY' values of windows.
# inactive-opacity-override = false;

# Make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
# transparent-clipping = false

# Specify a list of opacity rules, in the format `PERCENT:PATTERN`,
# like `50:name *= "Firefox"`. picom-trans is recommended over this.
# Note we don't make any guarantee about possible conflicts with other
# programs that set '_NET_WM_WINDOW_OPACITY' on frame or client windows.
opacity-rule = [
	"80:class_g = 'URxvt'",
	"80:class_g = 'UXTerm'",
	"80:class_g = 'XTerm'"
];
#+end_src

**** Dimming

#+begin_src conf :tangle ~/.config/picom/picom.conf
# Dim inactive windows.
# inactive-dim = 0.2;

# Use fixed inactive dim value, instead of adjusting according to window opacity.
# inactive-dim-fixed = 1.0;
# inactive-dim-fixed = true;

# Specify a list of conditions of windows that should never be considered focused.
focus-exclude = [
	"class_g = 'Cairo-clock'",
];

# Dimming bright windows so their brightness doesn't exceed this set value.
# Brightness of a window is estimated by averaging all pixels in the window,
# so this could comes with a performance hit.
# Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)
# max-brightness = 1.0
#+end_src

*** Corners
Sets the radius of rounded window corners. When > 0, the compositor will round the corners of windows. Does not interact well with =transparent-clipping=.

#+begin_src conf :tangle ~/.config/picom/picom.conf
corner-radius = 0;

# Exclude conditions for rounded corners.
rounded-corners-exclude = [
  "window_type = 'dock'",
  "window_type = 'desktop'"
];
#+end_src

*** Blur
Parameters for background blurring, see the *BLUR* section for more information.

#+begin_src conf :tangle ~/.config/picom/picom.conf
blur: {
	method = "dual_kawase";
    strength = 10;
	# deviation = 1.0;
	# kernel = "11x11gaussian";
}

# Blur background of semi-transparent / ARGB windows.
# Bad in performance, with driver-dependent behavior.
# The name of the switch may change without prior notifications.
blur-background = true;

# Blur background of windows when the window frame is not opaque.
# Implies:
#    blur-background
# Bad in performance, with driver-dependent behavior. The name may change.
blur-background-frame = true;

# Use fixed blur strength rather than adjusting according to window opacity.
blur-background-fixed = true;

# Specify the blur convolution kernel, with the following format:
# blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
# blur-kern = "3x3box";

# Exclude conditions for background blur.
blur-background-exclude = [
	"window_type = 'desktop'",
	"window_type = 'utility'",
	"_GTK_FRAME_EXTENTS@:c"
];

#+end_src

*** General Settings

#+begin_src conf :tangle ~/.config/picom/picom.conf
# sw-opti = true;

# Daemonize process. Fork to background after initialization. Causes issues with certain (badly-written) drivers.
# daemon = false

# Enable remote control via D-Bus. See the *D-BUS API* section below for more details.
# dbus = false

# Specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`.
# `xrender` is the default one.
backend = "glx";

# Enable/disable VSync.
vsync = true;

# Try to detect WM windows (a non-override-redirect window with no
# child that has 'WM_STATE') and mark them as active.
mark-wmwin-focused = true;

# Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
mark-ovredir-focused = true;

# Try to detect windows with rounded corners and don't consider them
# shaped windows. The accuracy is not very high, unfortunately.
detect-rounded-corners = true;

# Detect '_NET_WM_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_OPACITY' of client windows to frame windows.
detect-client-opacity = true;

# Specify refresh rate of the screen. If not specified or 0, picom will
# try detecting this with X RandR extension.
refresh-rate = 0;

# Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
# rather than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy,
# provided that the WM supports it.
# use-ewmh-active-win = true;

# Unredirect all windows if a full-screen opaque window is detected,
# to maximize performance for full-screen windows. Known to cause flickering
# when redirecting/unredirecting windows.
unredir-if-possible = false;

# Delay before unredirecting the window, in milliseconds. Defaults to 0.
# unredir-if-possible-delay = 5000;

# Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
# unredir-if-possible-exclude = [ ];

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
detect-transient = true;

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. 'WM_TRANSIENT_FOR' has higher priority if
# detect-transient is enabled, too.
detect-client-leader = true;

# Resize damaged region by a specific number of pixels.
# A positive value enlarges it while a negative one shrinks it.
# If the value is positive, those additional pixels will not be actually painted
# to screen, only used in blur calculation, and such. (Due to technical limitations,
# with use-damage, those pixels will still be incorrectly painted to screen.)
# Primarily used to fix the line corruption issues of blur,
# in which case you should use the blur radius value here
# (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
# with a 5x5 one you use `--resize-damage 2`, and so on).
# May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
# resize-damage = 1

# Specify a list of conditions of windows that should be painted with inverted color.
# Resource-hogging, and is not well tested.
invert-color-include = [ ];

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# My tests show a 15% performance boost. Recommended.
glx-no-stencil = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes,
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
# glx-no-rebind-pixmap = true;

# Disable the use of damage information.
# This cause the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
use-damage = true;

# Use X Sync fence to sync clients' draw calls, to make sure all draw
# calls are finished before picom starts drawing. Needed on nvidia-drivers
# with GLX backend for some users.
xrender-sync-fence = true; # testing enabling

# GLX backend: Use specified GLSL fragment shader for rendering window contents.
# See `compton-default-fshader-win.glsl` and `compton-fake-transparency-fshader-win.glsl`
# in the source tree for examples.
# glx-fshader-win = ""

# Force all windows to be painted with blending. Useful if you
# have a glx-fshader-win that could turn opaque pixels transparent.
# force-win-blend = false

# Do not use EWMH to detect fullscreen windows.
# Reverts to checking if a window is fullscreen based only on its size and coordinates.
# no-ewmh-fullscreen = false
#+end_src

*** Window type settings
'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
  - =unknown=
  - =desktop=
  - =dock=
  - =toolbar=
  - =menu=
  - =utility=
  - =splash=
  - =dialog=
  - =normal=
  - =dropdown_menu=
  - =popup_menu=
  - =tooltip=
  - =notification=
  - =combo=
  - =dnd=

Following per window-type options are available:
  - =fade=, =shadow=
    Controls window-type-specific shadow and fade settings.
  - =opacity=
    Controls default opacity of the window type.
  - =focus=
    Controls whether the window of this type is to be always considered focused.
    (By default, all window types except "normal" and "dialog" has this on.)
  - =full-shadow=
    Controls whether shadow is drawn under the parts of the window that you normally won't be able to see. Useful when the window has parts of it transparent, and you want shadows in those areas.
  - =clip-shadow-above=
    Controls whether shadows that would have been drawn above the window should be clipped. Useful for dock windows that should have no shadow painted on top.
  - =redir-ignore=
    Controls whether this type of windows should cause screen to become redirected again after been un-redirected. If you have =unredir-if-possible= set, and doesn't want certain window to cause unnecessary screen redirection, you can set this to =true=.

#+begin_src conf :tangle ~/.config/picom/picom.conf
wintypes:
{
	tooltip = { fade = true; shadow = true; focus = false;	};
	normal = { shadow = true; };
	dock = { shadow = false; };
	dnd = { shadow = false; };
	popup_menu = { shadow = true; focus = false; opacity = 0.90; };
	dropdown_menu = { shadow = false; focus = false; };
	above = { shadow = true; };
	splash = { shadow = false; };
	utility = { focus = false; shadow = false; };
	notification = { shadow = true; };
	desktop = { shadow = false };
	menu = { focus = false };
	dialog = { shadow = true; };
};
#+end_src

*** Logs
Set the log level and file
Possible values in increasing level of importance are (case doesn't matter):
 - "trace"
 - "debug"
 - "info"
 - "warn"
 - "error"
If using the "TRACE" log level, it's better to log into a file using *--log-file*, since it can generate a huge stream of logs.

If *--log-file* is never specified, logs will be written to =stderr=.
Otherwise, logs will to written to the given file, though some of the early logs might still be written to the =stderr=.
When setting this option from the config file, it is recommended to use an absolute path.

#+begin_src conf :tangle ~/.config/picom/picom.conf
log-level = "error";
# log-file = "~/.cache/picom.log";

# Show all X errors (for debugging)
# show-all-xerrors = false

# Write process ID to a file.
# write-pid-path = "~/.cache/picom_pid.log"
#+end_src
* Shell
** [[https://github.com/ArtemSmaznov/Dotfiles/tree/master/.config/bash][Bash]]
** [[https://github.com/ArtemSmaznov/Dotfiles/tree/master/.config/zsh][ZSH]]
** TODO [[https://github.com/ArtemSmaznov/Dotfiles/tree/master/.config/fish][Fish]]
** Aliases
To temporarily bypass an alias, we precede the command with a `\`
e.g. the ls command is aliased, but to use the normal ls command you would type `\ls`

*** Start

#+begin_src shell :tangle ~/.config/aliasrc
#!/usr/bin/env bash

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Enable aliases for Sudo commands
alias sudo='sudo '

alias makepkg='makepkg -si'
#+end_src

*** Editors

#+begin_src shell :tangle ~/.config/aliasrc
alias nano='nano -c'
alias snano='sudo nano'
alias svim='sudo vim'
#+end_src

*** Listing directories

#+begin_src shell :tangle ~/.config/aliasrc
if hash exa 2>/dev/null; then
    alias exa='exa --icons --group-directories-first'
    alias ls='exa -Fh'                # add file type extensions
    alias la='ls -ah'                 # show hidden files
    alias ll='ls -al'                 # long listing format
else
    alias ls='ls -Fh --color=always'  # add colors and file type extensions
    alias la='ls -Ah'                 # show hidden files
    alias ll='ls -als'                # long listing format
fi
alias llf="\ls -l | egrep -v '^d'" # long list files only
alias lld="\ls -l | egrep '^d'"    # long list directories only
#+end_src

*** Changing directories

#+begin_src shell :tangle ~/.config/aliasrc
alias ~='cd ~'
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# cd back into the previous directory
alias bd='cd "$OLDPWD"'

# Make directories recursively
alias mkdir='mkdir -p'

# Create and go to the directory
mkdirg() {
    mkdir -p $1
    cd $1
}
#+end_src

*** Copy
Copy file with a progress bar

#+begin_src shell :tangle ~/.config/aliasrc
cpp() {
    set -e
    strace -q -ewrite cp -- "${1}" "${2}" 2>&1 |
        awk '{
    count += $NF
    if (count % 10 == 0) {
        percent = count / total_size * 100
        printf "%3d%% [", percent
        for (i=0;i<=percent;i++)
            printf "="
            printf ">"
            for (i=percent;i<100;i++)
                printf " "
                printf "]\r"
            }
        }
    END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}
#+end_src

*** Search

#+begin_src shell :tangle ~/.config/aliasrc
# Less
alias less='less -iRNJ --use-color'

# Grep
alias grep='grep --colour=auto'
alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '

# Search command line history
alias h="history | grep "

# Search files in the current folder
alias f="find . | grep "
alias ff='find . -type f -name'
alias fd='find . -type d -name'

# Count all files (recursively) in the current folder
alias countfiles="for t in files links directories; do echo \`find . -type \${t:0:1} | wc -l\` \$t; done 2> /dev/null"

# Searches for text in all files in the current folder
ftext() {
    # -i case-insensitive
    # -I ignore binary files
    # -H causes filename to be printed
    # -r recursive search
    # -n causes line number to be printed
    # optional: -F treat search term as a literal, not a regular expression
    # optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
    grep -iIHrn --color=always "$1" . | less -r
}
#+end_src

*** Tools

#+begin_src shell :tangle ~/.config/aliasrc
# Start ArchiSteamFarm
if [[ -d ~/ASF ]]; then
    alias asf='~/ASF/ArchiSteamFarm'
fi

# Start Picom
alias startpicom='picom -b --experimental-backends --dbus'

# Update Proton
alias update-proton='$GIT_DIRECTORY/../SystemSoftware/ProtonUpdater/cproton.sh'
#+end_src

*** System
**** Pacman

#+begin_src shell :tangle ~/.config/aliasrc
alias pacman-upgrade='sudo pacman -syu'
alias pacman-mirrors-update='sudo pacman-mirrors --geoip'
alias pacman-orphans-clean='sudo pacman -rs $(pacman -qtdq)'
alias pacman-orphans-fullclean='sudo pacman -rns $(pacman -qtdq)'
# fzf
alias pacman-browse="pacman -Slq | fzf --multi --preview 'pacman -Si {1}' | xargs -ro sudo pacman -S"
alias pacman-list="pacman -Qq | fzf --multi --preview 'pacman -Qi {1}' | xargs -ro sudo pacman -Rcs"
#+end_src

**** Power Control

#+begin_src shell :tangle ~/.config/aliasrc
alias reboot='sudo shutdown -r now'
alias forcereboot='sudo shutdown -r -n now'
alias shutdown='sudo shutdown -P'
alias suspend='systemctl suspend'
#+end_src

**** System Tools

#+begin_src shell :tangle ~/.config/aliasrc
# Alias's to show disk space and space used in a folder
alias diskspace="du -S | sort -n -r |more"
alias folders='du -h --max-depth=1'
alias folderssort='find . -maxdepth 1 -type d -print0 | xargs -0 du -sk | sort -rn'
alias tree='tree -CAhF --dirsfirst'
alias treed='tree -CAFd'
alias mountedinfo='df -hT'

# Audio Outout info
alias aoutput='cat /proc/asound/card2/pcm0p/sub0/hw_params'

# Search running processes
alias p="ps aux | grep "
alias topcpu="/bin/ps -eo pcpu,pid,user,args | sort -k 1 -r | head -10"

# Show all logs in /var/log
alias logs="sudo find /var/log -type f -exec file {} \; | grep 'text' | cut -d' ' -f1 | sed -e's/:$//g' | grep -v '[0-9]$' | xargs tail -f"
#+end_src

**** Networking

#+begin_src shell :tangle ~/.config/aliasrc
# Show used DNS addresses
alias dnsview='cat /etc/resolv.conf'

# Show current network connections to the server
alias ipview="netstat -anpl | grep :80 | awk {'print \$5'} | cut -d\":\" -f1 | sort | uniq -c | sort -n | sed -e 's/^ *//' -e 's/ *\$//'"

# Show open ports
alias openports='netstat -nape --inet'

# SSH
alias extendtolaptop='ssh -YC wifi-laptop-arch x2x -east -to :0.0'
#+end_src

*** Git

#+begin_src shell :tangle ~/.config/aliasrc
alias gs="git fetch && git status"
alias gc="git commit"
alias gp="git push"
alias gf="git pull"
alias gd="git diff"
#+end_src

**** Bare Repositories

#+begin_src shell :tangle ~/.config/aliasrc
bare_repos=(
    "dot"
    "private"
)

for repo in "${bare_repos[@]}"; do
    case $repo in
        dot)
            bare_git_dir="$GIT_DIRECTORY/Dotfiles/"
            bare_work_tree="$HOME" ;;
        private)
            bare_git_dir="$GIT_DIRECTORY/private-Dotfiles/"
            bare_work_tree="$HOME" ;;
    esac

    alias g$repo="git --git-dir=$bare_git_dir --work-tree=$bare_work_tree"
    alias gs$repo="g$repo fetch && g$repo status"
    alias gc$repo="g$repo commit"
    alias gp$repo="g$repo push"
    alias gf$repo="g$repo pull"
    alias gd$repo="g$repo diff"
done
#+end_src

*** Archives
Extracts any archive(s) (if unp isn't installed)

#+begin_src shell :tangle ~/.config/aliasrc
ex() {
    for archive in $*; do
        if [ -f $archive ]; then
            case $archive in
                ,*.tar.bz2) tar xvjf $archive ;;
                ,*.tar.gz) tar xvzf $archive ;;
                ,*.bz2) bunzip2 $archive ;;
                ,*.rar) rar x $archive ;;
                ,*.gz) gunzip $archive ;;
                ,*.tar) tar xvf $archive ;;
                ,*.tbz2) tar xvjf $archive ;;
                ,*.tgz) tar xvzf $archive ;;
                ,*.zip) unzip $archive ;;
                ,*.Z) uncompress $archive ;;
                ,*.7z) 7z x $archive ;;
                ,*) echo "don't know how to extract '$archive'..." ;;
            esac
        else
            echo "'$archive' is not a valid file!"
        fi
    done
}
#+end_src
** TODO Starship Prompt
* Terminal
** TODO Alacritty
** TODO Terminator
* Text Editor
** [[https://github.com/ArtemSmaznov/Doom-emacs/][Doom-emacs]]
** [[https://github.com/ArtemSmaznov/Vim][Vim]]
** TODO Nano

* Web Browser
** [[https://github.com/ArtemSmaznov/Dotfiles/tree/master/.config/qutebrowser][QuteBrowser]]
** TODO Nyxt
** IDEA Vimb

* Tools
** TODO =tmux=
** TODO =cava=
** TODO =dunst=
** TODO =gh=
** TODO =neofetch=
** TODO =htop=
** TODO =bashtop=
** TODO =redshift=
** TODO =rofi=
** TODO =vifm=
