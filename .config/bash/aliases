#!/usr/bin/env bash
#
# To temporarily bypass an alias, we preceed the command with a \
# EG: the ls command is aliased, but to use the normal ls command you would type \ls


# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Editors
alias nano='nano -c'
alias snano='sudo nano'
alias svim='sudo vim'

# Enable aliases for Sudo commands
alias sudo='sudo '

# Aliases to modified commands
alias mkdir='mkdir -p'
alias less='less -R'
alias makepkg='makepkg -si'

# Change directory aliases
alias ~='cd ~'
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# cd back into the previous directory
alias bd='cd "$OLDPWD"'

# Aliases for multiple directory listing commands
if hash exa 2>/dev/null; then
  alias exa='exa --icons --group-directories-first'
  alias ls='exa -Fh'                # add file type extensions
  alias la='ls -ah'                 # show hidden files
  alias ll='ls -al'                 # long listing format
else
  alias ls='ls -Fh --color=always'  # add colors and file type extensions
  alias la='ls -Ah'                 # show hidden files
  alias ll='ls -als'                # long listing format
fi
alias llf="\ls -l | egrep -v '^d'" # long list files only
alias lld="\ls -l | egrep '^d'"    # long list directories only

# Grep
alias grep='grep --colour=auto'
alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '

# Search command line history
alias h="history | grep "

# Search files in the current folder
alias f="find . | grep "
alias ff='find . -type f -name'
alias fd='find . -type d -name'

# Alias's to show disk space and space used in a folder
alias diskspace="du -S | sort -n -r |more"
alias folders='du -h --max-depth=1'
alias folderssort='find . -maxdepth 1 -type d -print0 | xargs -0 du -sk | sort -rn'
alias tree='tree -CAhF --dirsfirst'
alias treed='tree -CAFd'
alias mountedinfo='df -hT'

# Count all files (recursively) in the current folder
alias countfiles="for t in files links directories; do echo \`find . -type \${t:0:1} | wc -l\` \$t; done 2> /dev/null"


# ░█▀▀░█░█░█▀▀░▀█▀░█▀▀░█▄█
# ░▀▀█░░█░░▀▀█░░█░░█▀▀░█░█
# ░▀▀▀░░▀░░▀▀▀░░▀░░▀▀▀░▀░▀

# pacman for Arch based systems
alias pacman-upgrade='sudo pacman -Syu'
alias pacman-mirrors-update='sudo pacman-mirrors --geoip'
alias pacman-orphans-clean='sudo pacman -Rs $(pacman -Qtdq)'
alias pacman-orphans-fullclean='sudo pacman -Rns $(pacman -Qtdq)'
# fzf
alias pacman-browse="pacman -Slq | fzf --multi --preview 'pacman -Si {1}' | xargs -ro sudo pacman -S"
alias pacman-list="pacman -Qq | fzf --multi --preview 'pacman -Qi {1}' | xargs -ro sudo pacman -Rcs"

# Start ArchiSteamFarm
if [[ -d ~/ASF ]]; then
  alias asf='~/ASF/ArchiSteamFarm'
fi

# Start Picom
alias startpicom='picom -b --experimental-backends --dbus'

# Update Proton
alias update-proton='$GIT_DIRECTORY/../SystemSoftware/ProtonUpdater/cproton.sh'

###############################
# POWER CONTROL
###############################

# Alias's for power management
alias reboot='sudo shutdown -r now'
alias forcereboot='sudo shutdown -r -n now'
alias shutdown='sudo shutdown -P'
alias suspend='systemctl suspend'

###############################
# SYSTOOLS
###############################

# Audio Outout info
alias aoutput='cat /proc/asound/card2/pcm0p/sub0/hw_params'

# Search running processes
alias p="ps aux | grep "
alias topcpu="/bin/ps -eo pcpu,pid,user,args | sort -k 1 -r | head -10"

# Show all logs in /var/log
alias logs="sudo find /var/log -type f -exec file {} \; | grep 'text' | cut -d' ' -f1 | sed -e's/:$//g' | grep -v '[0-9]$' | xargs tail -f"

###############################
# NETWORKING
###############################

# Show used DNS addresses
alias dnsview='cat /etc/resolv.conf'

# Show current network connections to the server
alias ipview="netstat -anpl | grep :80 | awk {'print \$5'} | cut -d\":\" -f1 | sort | uniq -c | sort -n | sed -e 's/^ *//' -e 's/ *\$//'"

# Show open ports
alias openports='netstat -nape --inet'


# ░█▀▀░▀█▀░▀█▀
# ░█░█░░█░░░█░
# ░▀▀▀░▀▀▀░░▀░

alias gs="git fetch && git status"
alias gc="git commit -a"
alias gp="git commit -a && git push"

# Dotfiles bare git repositories
bare_repos=(
  "dot"
  "vim"
  "private"
  "qtile"
  "awesome"
  "dmscripts"
  "wallpapers"
)

for repo in "${bare_repos[@]}"; do
  case $repo in
    dot)
      bare_git_dir="$GIT_DIRECTORY/Dotfiles/"
      bare_work_tree="$HOME" ;;
    vim)
      bare_git_dir="$GIT_DIRECTORY/Vim/"
      bare_work_tree="$HOME" ;;
    private)
      bare_git_dir="$GIT_DIRECTORY/private-Dotfiles/"
      bare_work_tree="$HOME" ;;
    qtile)
      bare_git_dir="$GIT_DIRECTORY/qTile/"
      bare_work_tree="$HOME/.config/qtile" ;;
    awesome)
      bare_git_dir="$GIT_DIRECTORY/AwesomeWM/"
      bare_work_tree="$HOME/.config/awesome" ;;
    dmscripts)
      bare_git_dir="$GIT_DIRECTORY/dmscripts/"
      bare_work_tree="$HOME/.local/bin/dmscripts" ;;
    wallpapers)
      bare_git_dir="$GIT_DIRECTORY/Wallpapers/"
      bare_work_tree="$WALL_DIRECTORY" ;;
  esac

  alias g$repo="/usr/bin/git --git-dir=$bare_git_dir --work-tree=$bare_work_tree" 
  alias gs$repo="g$repo fetch && g$repo status"
  alias gc$repo="g$repo commit -a"
done



# ░█▀▀░█░█░█▀█░█▀▀░▀█▀░▀█▀░█▀█░█▀█░█▀▀
# ░█▀▀░█░█░█░█░█░░░░█░░░█░░█░█░█░█░▀▀█
# ░▀░░░▀▀▀░▀░▀░▀▀▀░░▀░░▀▀▀░▀▀▀░▀░▀░▀▀▀

# Extracts any archive(s) (if unp isn't installed)
ex() {
  for archive in $*; do
    if [ -f $archive ]; then
      case $archive in
      *.tar.bz2) tar xvjf $archive ;;
      *.tar.gz) tar xvzf $archive ;;
      *.bz2) bunzip2 $archive ;;
      *.rar) rar x $archive ;;
      *.gz) gunzip $archive ;;
      *.tar) tar xvf $archive ;;
      *.tbz2) tar xvjf $archive ;;
      *.tgz) tar xvzf $archive ;;
      *.zip) unzip $archive ;;
      *.Z) uncompress $archive ;;
      *.7z) 7z x $archive ;;
      *) echo "don't know how to extract '$archive'..." ;;
      esac
    else
      echo "'$archive' is not a valid file!"
    fi
  done
}

# Searches for text in all files in the current folder
ftext() {
  # -i case-insensitive
  # -I ignore binary files
  # -H causes filename to be printed
  # -r recursive search
  # -n causes line number to be printed
  # optional: -F treat search term as a literal, not a regular expression
  # optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
  grep -iIHrn --color=always "$1" . | less -r
}

# Copy file with a progress bar
cpp() {
  set -e
  strace -q -ewrite cp -- "${1}" "${2}" 2>&1 |
    awk '{
	count += $NF
	if (count % 10 == 0) {
		percent = count / total_size * 100
		printf "%3d%% [", percent
		for (i=0;i<=percent;i++)
			printf "="
			printf ">"
			for (i=percent;i<100;i++)
				printf " "
				printf "]\r"
			}
		}
	END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}

# Create and go to the directory
mkdirg() {
  mkdir -p $1
  cd $1
}

