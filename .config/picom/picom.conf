wintypes:
{
    tooltip = { fade = true; shadow = true; focus = false; };
    normal = { shadow = true; };
    dock = { shadow = false; };
    dnd = { shadow = false; };
    popup_menu = { shadow = true; focus = false; opacity = 0.90; };
    dropdown_menu = { shadow = false; focus = false; };
    above = { shadow = true; };
    splash = { shadow = false; };
    utility = { focus = false; shadow = false; };
    notification = { shadow = true; };
    desktop = { shadow = false };
    menu = { focus = false };
    dialog = { shadow = true; };
};

# Default opacity for active and inactive windows as well as window title bars and borders
active-opacity = 1;
inactive-opacity = 0.5;
frame-opacity = 1;

# Let inactive opacity set by -i override the '_NET_WM_OPACITY' values of windows.
# inactive-opacity-override = false;

# Make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
# transparent-clipping = false

# Specify a list of opacity rules, in the format `PERCENT:PATTERN`,
# like `50:name *= "Firefox"`. picom-trans is recommended over this.
# Note we don't make any guarantee about possible conflicts with other
# programs that set '_NET_WM_WINDOW_OPACITY' on frame or client windows.
opacity-rule = [
    "80:class_g = 'URxvt'",
    "80:class_g = 'UXTerm'",
    "80:class_g = 'XTerm'"
];

# Dim inactive windows.
# inactive-dim = 0.2;

# Use fixed inactive dim value, instead of adjusting according to window opacity.
# inactive-dim-fixed = 1.0;
# inactive-dim-fixed = true;

# Specify a list of conditions of windows that should never be considered focused.
focus-exclude = [
    "class_g = 'Cairo-clock'",
];

# Dimming bright windows so their brightness doesn't exceed this set value.
# Brightness of a window is estimated by averaging all pixels in the window,
# so this could comes with a performance hit.
# Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)
# max-brightness = 1.0

blur: {
    method = "dual_kawase";
    strength = 7;
}

# Blur background of semi-transparent / ARGB windows.
# Bad in performance, with driver-dependent behavior.
# The name of the switch may change without prior notifications.
blur-background = false;

# Blur background of windows when the window frame is not opaque.
# Implies:
#    blur-background
# Bad in performance, with driver-dependent behavior. The name may change.
# blur-background-frame = true;

# Use fixed blur strength rather than adjusting according to window opacity.
blur-background-fixed = false;

# Specify the blur convolution kernel, with the following format:
# blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
# blur-kern = "3x3box";

# Exclude conditions for background blur.
blur-background-exclude = [
	"window_type = 'desktop'",
	"window_type = 'utility'",
	"name        = 'slop'", # for not blurring maim area screenshots
	"_GTK_FRAME_EXTENTS@:c"
];

corner-radius = 15;

# Exclude conditions for rounded corners.
rounded-corners-exclude = [
  "window_type = 'desktop'",
  "window_type = 'dock'",
  "! name~=''", # exclude windows with no name such as qtile's bar
];

shadow = true;

shadow-radius = 12;
shadow-offset-x = -12;
shadow-offset-y = -12;
shadow-opacity = 0.7;
shadow-color = "#000000"

# Specify a list of conditions of windows that should have no shadow.
shadow-exclude = [
    "name = 'Notification'",
    "class_g = 'Conky'",
    "class_g ?= 'Notify-osd'",
    "class_g = 'Cairo-clock'",
    "class_g = 'slop'",
    "_GTK_FRAME_EXTENTS@:c",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"
];

# Specify a list of conditions of windows that should have no shadow painted over, such as a dock window.
# clip-shadow-above = []

# Specify a X geometry that describes the region in which shadow should not
# be painted in, such as a dock window region. Use
#    shadow-exclude-reg = "x10+0+0"
# for example, if the 10 pixels on the bottom of the screen should not have shadows painted on.
#
# shadow-exclude-reg = "x10+0+0";

# Crop shadow of a window fully on a particular Xinerama screen to the screen.
# xinerama-shadow-crop = true

fading = true;

# Opacity change between steps while fading.
fade-in-step = 0.03;
fade-out-step = 0.03;

# The time between steps in fade step, in milliseconds.
fade-delta = 5;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [];

# Do not fade on window open/close.
# no-fading-openclose = true;

# Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
no-fading-destroyed-argb = true;

# sw-opti = true;

# Daemonize process. Fork to background after initialization. Causes issues with certain (badly-written) drivers.
# daemon = false

# Enable remote control via D-Bus. See the *D-BUS API* section below for more details.
# dbus = false

# Specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`.
# `xrender` is the default one.
backend = "glx";

# Enable/disable VSync.
vsync = true;

# Try to detect WM windows (a non-override-redirect window with no
# child that has 'WM_STATE') and mark them as active.
mark-wmwin-focused = true;

# Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
mark-ovredir-focused = true;

# Try to detect windows with rounded corners and don't consider them
# shaped windows. The accuracy is not very high, unfortunately.
detect-rounded-corners = true;

# Detect '_NET_WM_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_OPACITY' of client windows to frame windows.
detect-client-opacity = true;

# Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
# rather than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy,
# provided that the WM supports it.
# use-ewmh-active-win = true;

# Unredirect all windows if a full-screen opaque window is detected,
# to maximize performance for full-screen windows. Known to cause flickering
# when redirecting/unredirecting windows.
unredir-if-possible = false;

# Delay before unredirecting the window, in milliseconds. Defaults to 0.
# unredir-if-possible-delay = 5000;

# Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
# unredir-if-possible-exclude = [ ];

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
detect-transient = true;

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. 'WM_TRANSIENT_FOR' has higher priority if
# detect-transient is enabled, too.
detect-client-leader = true;

# Resize damaged region by a specific number of pixels.
# A positive value enlarges it while a negative one shrinks it.
# If the value is positive, those additional pixels will not be actually painted
# to screen, only used in blur calculation, and such. (Due to technical limitations,
# with use-damage, those pixels will still be incorrectly painted to screen.)
# Primarily used to fix the line corruption issues of blur,
# in which case you should use the blur radius value here
# (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
# with a 5x5 one you use `--resize-damage 2`, and so on).
# May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
# resize-damage = 1

# Specify a list of conditions of windows that should be painted with inverted color.
# Resource-hogging, and is not well tested.
invert-color-include = [ ];

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# My tests show a 15% performance boost. Recommended.
glx-no-stencil = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes,
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
# glx-no-rebind-pixmap = true;

# Disable the use of damage information.
# This cause the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
use-damage = true;

# Use X Sync fence to sync clients' draw calls, to make sure all draw
# calls are finished before picom starts drawing. Needed on nvidia-drivers
# with GLX backend for some users.
xrender-sync-fence = true; # testing enabling

# GLX backend: Use specified GLSL fragment shader for rendering window contents.
# See `compton-default-fshader-win.glsl` and `compton-fake-transparency-fshader-win.glsl`
# in the source tree for examples.
# glx-fshader-win = ""

# Force all windows to be painted with blending. Useful if you
# have a glx-fshader-win that could turn opaque pixels transparent.
# force-win-blend = false

# Do not use EWMH to detect fullscreen windows.
# Reverts to checking if a window is fullscreen based only on its size and coordinates.
# no-ewmh-fullscreen = false

log-level = "error";
# log-file = "~/.cache/picom.log";

# Show all X errors (for debugging)
# show-all-xerrors = false

# Write process ID to a file.
# write-pid-path = "~/.cache/picom_pid.log"
